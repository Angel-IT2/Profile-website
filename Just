import { useEffect, useState } from "react";
import { apiRequest } from "../apiComponents/api";
import "./WhatstheDifference_style.css";

const ModeratorDifference = () => {
  const [posts, setPosts] = useState([]);
  const [filter, setFilter] = useState("pending"); // ‚úÖ default to pending posts
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [user, setUser] = useState(null);

  useEffect(() => {
    const userData = JSON.parse(localStorage.getItem("user"));
    setUser(userData);
    if (userData) fetchPosts(filter); // fetch posts on mount
  }, []); // run only once

  useEffect(() => {
    if (user) fetchPosts(filter); // fetch posts when filter changes
  }, [filter]);

  const fetchPosts = async (statusFilter) => {
    try {
      setLoading(true);
      setError("");

      // Send filter only if not "all"
      const queryParams = statusFilter && statusFilter !== "all" ? { status: statusFilter } : {};
      const data = await apiRequest("/api/wtd/posts/", "GET", null, queryParams);
      setPosts(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("‚ùå Fetch posts error:", err);
      setError("Failed to load posts: " + err.message);
      setPosts([]);
    } finally {
      setLoading(false);
    }
  };

  const handleApprove = async (postId) => {
    try {
      setError("");
      await apiRequest(`/api/wtd/posts/${postId}/approve/`, "POST");
      fetchPosts(filter);
    } catch (err) {
      console.error("‚ùå Approve error:", err);
      setError("Failed to approve post: " + err.message);
    }
  };

  const handleReject = async (postId) => {
    try {
      setError("");
      await apiRequest(`/api/wtd/posts/${postId}/reject/`, "POST");
      fetchPosts(filter);
    } catch (err) {
      console.error("‚ùå Reject error:", err);
      setError("Failed to reject post: " + err.message);
    }
  };

  const getInitials = (username) => (username ? username.charAt(0).toUpperCase() : "U");

  const getStatusTag = (status) => {
    const statusConfig = {
      approved: { text: "Approved", class: "approved" },
      pending: { text: "Pending Review", class: "pending" },
      rejected: { text: "Rejected", class: "rejected" }
    };
    const config = statusConfig[status] || { text: status, class: "default" };
    return <span className={`tag ${config.class}`}>{config.text}</span>;
  };

  const getStatusCounts = () => ({
    pending: posts.filter((p) => p.status === "pending").length,
    approved: posts.filter((p) => p.status === "approved").length,
    rejected: posts.filter((p) => p.status === "rejected").length,
    total: posts.length
  });

  const statusCounts = getStatusCounts();

  if (!user || user?.profile?.student_type !== "moderator") {
    return (
      <div className="container" style={{ textAlign: "center", padding: "40px" }}>
        <h4>Access Denied</h4>
        <p>Only moderators can access this page.</p>
      </div>
    );
  }

  return (
    <div className="container">
      <h4>Moderator Dashboard - Post Management</h4>
      <p className="wdifference-caption">Review, approve, or reject student submissions</p>

      {/* Stats */}
      <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))", gap: "15px", marginBottom: "20px" }}>
        <div style={{ background: "#fff3cd", padding: "15px", borderRadius: "8px", textAlign: "center", color: "#856404" }}>
          <h3>{statusCounts.pending}</h3>
          <p>Pending Review</p>
        </div>
        <div style={{ background: "#d1f7d6", padding: "15px", borderRadius: "8px", textAlign: "center", color: "#155724" }}>
          <h3>{statusCounts.approved}</h3>
          <p>Approved</p>
        </div>
        <div style={{ background: "#f8d7da", padding: "15px", borderRadius: "8px", textAlign: "center", color: "#721c24" }}>
          <h3>{statusCounts.rejected}</h3>
          <p>Rejected</p>
        </div>
        <div style={{ background: "#e8f4fd", padding: "15px", borderRadius: "8px", textAlign: "center", color: "#0b2f4f" }}>
          <h3>{statusCounts.total}</h3>
          <p>Total Posts</p>
        </div>
      </div>

      {/* Filter */}
      <div className="sort-controls">
        <label><strong>Filter by Status:</strong></label>
        <select value={filter} onChange={(e) => setFilter(e.target.value)}>
          <option value="all">All Posts ({statusCounts.total})</option>
          <option value="pending">Pending Review ({statusCounts.pending})</option>
          <option value="approved">Approved ({statusCounts.approved})</option>
          <option value="rejected">Rejected ({statusCounts.rejected})</option>
        </select>
        <button className="reply-btn" onClick={() => fetchPosts(filter)} disabled={loading}>üîÑ Refresh</button>
      </div>

      {error && <div style={{ background: "#f8d7da", color: "#721c24", padding: "12px", borderRadius: "4px", marginBottom: "20px", border: "1px solid #f5c6cb" }}>{error}</div>}

      {/* Posts */}
      <div className="posts-container">
        {loading && <div style={{ textAlign: "center", padding: "20px" }}>Loading posts...</div>}

        {!loading && posts.length > 0 ? posts.map((post) => (
          <div key={post.id} className="post">
            <div className="post-header">
              <span>Post #{post.id} ‚Ä¢ By {post.author_username}</span>
              {getStatusTag(post.status)}
            </div>
            <div className="post-body">
              <div className="user">
                <div className="avatar">{getInitials(post.author_username)}</div>
                <div className="user-info">
                  <strong>{post.author_username}</strong>
                  <small>Posted on {new Date(post.created_at).toLocaleDateString()}</small>
                </div>
              </div>
              <h3>{post.title}</h3>
              <div className="body-text">{post.content}</div>
              <div className="actions" style={{ display: "flex", gap: "10px", marginTop: "10px" }}>
                <span>üëç {post.helpful_count} helpful votes</span>
                {post.status === "pending" && <button className="reply-btn" style={{ background: "#28a745" }} onClick={() => handleApprove(post.id)}>‚úÖ Approve</button>}
                <button className="reply-btn" style={{ background: "#dc3545" }} onClick={() => handleReject(post.id)}>‚ùå Reject</button>
              </div>
            </div>
          </div>
        )) : !loading && <div style={{ textAlign: "center", padding: "40px", color: "#666" }}><h3>No posts found</h3></div>}
      </div>
    </div>
  );
};

export default ModeratorDifference;
