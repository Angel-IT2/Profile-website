import React, { useState, useEffect } from "react";
import { apiRequest, API_URL, getAuthHeaders } from "../apiComponents/api";
import "./WhatstheDifference_style.css";

const ModeratorDifference = () => {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [filter, setFilter] = useState("pending");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    setUser(storedUser);
    if (storedUser?.profile?.student_type?.toLowerCase() === "moderator") {
      fetchPosts(filter);
    }
  }, [filter]);

  const fetchPosts = async (status = "pending") => {
    try {
      setLoading(true);
      setError("");

      const queryParams = status !== "all" ? { status } : null;
      const data = await apiRequest("/api/wtd/posts/", "GET", null, queryParams);
      setPosts(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("‚ùå Fetch posts error:", err);
      setError("Failed to load posts: " + err.message);
      setPosts([]);
    } finally {
      setLoading(false);
    }
  };

  const handleApprove = async (postId) => {
    try {
      await apiRequest(`/api/wtd/posts/${postId}/approve/`, "POST");
      fetchPosts(filter);
    } catch (err) {
      console.error("‚ùå Approve error:", err);
      setError("Failed to approve post: " + err.message);
    }
  };

  const handleReject = async (postId) => {
    try {
      await apiRequest(`/api/wtd/posts/${postId}/reject/`, "POST");
      fetchPosts(filter);
    } catch (err) {
      console.error("‚ùå Reject error:", err);
      setError("Failed to reject post: " + err.message);
    }
  };

  const formatDate = (iso) => new Date(iso).toLocaleString();
  const getInitials = (username) => (username ? username.charAt(0).toUpperCase() : "U");

  const getStatusTag = (status) => {
    const statusConfig = {
      approved: { text: "Approved", class: "approved" },
      pending: { text: "Pending Review", class: "pending" },
      rejected: { text: "Rejected", class: "rejected" },
    };
    const config = statusConfig[status] || { text: status, class: "default" };
    return <span className={`tag ${config.class}`}>{config.text}</span>;
  };

  const getStatusCounts = () => {
    return {
      pending: posts.filter((post) => post.status === "pending").length,
      approved: posts.filter((post) => post.status === "approved").length,
      rejected: posts.filter((post) => post.status === "rejected").length,
      total: posts.length,
    };
  };

  const statusCounts = getStatusCounts();

  if (!user || user?.profile?.student_type?.toLowerCase() !== "moderator") {
    return (
      <div className="container" style={{ textAlign: "center", padding: "40px" }}>
        <h4>Access Denied</h4>
        <p>This page is only accessible to moderators.</p>
      </div>
    );
  }

  return (
    <div className="container">
      <h4>Moderator ‚Äì WhatsTheDifference</h4>
      <p className="wdifference-caption">Manage insights submitted by Senior Students</p>

      <p>Logged in as <strong>{user.full_name}</strong> (Moderator)</p>

      {/* Moderator Stats */}
      <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))", gap: "15px", marginBottom: "20px" }}>
        <div style={{ background: "#fff3cd", padding: "15px", borderRadius: "8px", textAlign: "center" }}>
          <h3 style={{ margin: 0, color: "#856404" }}>{statusCounts.pending}</h3>
          <p style={{ margin: "5px 0 0 0", color: "#856404" }}>Pending Review</p>
        </div>
        <div style={{ background: "#d1f7d6", padding: "15px", borderRadius: "8px", textAlign: "center" }}>
          <h3 style={{ margin: 0, color: "#155724" }}>{statusCounts.approved}</h3>
          <p style={{ margin: "5px 0 0 0", color: "#155724" }}>Approved</p>
        </div>
        <div style={{ background: "#f8d7da", padding: "15px", borderRadius: "8px", textAlign: "center" }}>
          <h3 style={{ margin: 0, color: "#721c24" }}>{statusCounts.rejected}</h3>
          <p style={{ margin: "5px 0 0 0", color: "#721c24" }}>Rejected</p>
        </div>
        <div style={{ background: "#e8f4fd", padding: "15px", borderRadius: "8px", textAlign: "center" }}>
          <h3 style={{ margin: 0, color: "#0b2f4f" }}>{statusCounts.total}</h3>
          <p style={{ margin: "5px 0 0 0", color: "#0b2f4f" }}>Total Posts</p>
        </div>
      </div>

      {/* Filter Controls */}
      <div className="sort-controls" style={{ marginBottom: "20px" }}>
        <label><strong>Filter by Status:</strong></label>
        <select value={filter} onChange={(e) => setFilter(e.target.value)} style={{ marginLeft: "10px", marginRight: "10px" }}>
          <option value="all">All Posts ({statusCounts.total})</option>
          <option value="pending">Pending Review ({statusCounts.pending})</option>
          <option value="approved">Approved ({statusCounts.approved})</option>
          <option value="rejected">Rejected ({statusCounts.rejected})</option>
        </select>
        <button className="reply-btn" onClick={() => fetchPosts(filter)}>üîÑ Refresh</button>
      </div>

      {loading && <p>Loading posts...</p>}
      {error && (
        <div style={{ background: "#f8d7da", color: "#721c24", padding: "12px", borderRadius: "4px", marginBottom: "20px", border: "1px solid #f5c6cb" }}>
          {error}
        </div>
      )}

      <div className="posts-container">
        {posts.length === 0 && !loading && <p>No {filter} posts available.</p>}

        {posts.map((post) => (
          <div key={post.id} className="post">
            <div className="post-header">
              <span>Post #{post.id} ‚Ä¢ By {post.author_username}</span>
              {getStatusTag(post.status)}
            </div>
            <div className="post-body">
              <div className="user-info">
                <strong>{post.author_username}</strong>
                <small>Posted on {formatDate(post.created_at)}</small>
              </div>
              <h3>{post.title}</h3>
              <div className="body-text">{post.content}</div>
              <div className="actions" style={{ display: "flex", gap: "10px", marginTop: "10px" }}>
                {post.status === "pending" && (
                  <>
                    <button onClick={() => handleApprove(post.id)} style={{ background: "#28a745" }}>‚úÖ Approve</button>
                    <button onClick={() => handleReject(post.id)} style={{ background: "#dc3545" }}>‚ùå Reject</button>
                  </>
                )}
                <span>üëç {post.helpful_count} helpful votes</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ModeratorDifference;
